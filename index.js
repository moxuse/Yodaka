// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  exports["flip"] = flip;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["composeKleisli"] = composeKleisli;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Util"] = $PS["Graphics.Three.Util"] || {};
  var exports = $PS["Graphics.Three.Util"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
  var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
  exports["ffi"] = ffi;
  exports["fpi"] = fpi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.GeometryAddition"] = $PS["Graphics.Three.GeometryAddition"] || {};
  var exports = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                                                                                                      
  var createSphereGeometry = Graphics_Three_Util.ffi([ "radius", "widthSegments", "heightSegments", "" ])("new THREE.SphereGeometry(radius, widthSegments, heightSegments)");
  var createPlaneBufferGeometry = Graphics_Three_Util.ffi([ "width", "height", "widthSegments", "heightSegments", "" ])("new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments)");
  exports["createSphereGeometry"] = createSphereGeometry;
  exports["createPlaneBufferGeometry"] = createPlaneBufferGeometry;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Material"] = $PS["Graphics.Three.Material"] || {};
  var exports = $PS["Graphics.Three.Material"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var setUniform = Graphics_Three_Util.ffi([ "material", "key", "value", "" ])("material.uniforms[key].value = value");
  var createShader = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.ShaderMaterial(param)");
  exports["createShader"] = createShader;
  exports["setUniform"] = setUniform;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.MaterialAddition"] = $PS["Graphics.Three.MaterialAddition"] || {};
  var exports = $PS["Graphics.Three.MaterialAddition"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var updateMaterial = function (dictMaterial) {
      return Graphics_Three_Util.fpi([ "material", "" ])("material.needsUpdate = true");
  };                                                          
  var createMeshStandard = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.MeshStandardMaterial(param)");
  exports["createMeshStandard"] = createMeshStandard;
  exports["updateMaterial"] = updateMaterial;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  // module Graphics.Three.Math.Vector

  exports.createVec3 = function(x) {
      return function(y) {
          return function(z) {
              return new THREE.Vector3(x, y, z);
          };
      };
  };
})(PS["Graphics.Three.Math.Vector"] = PS["Graphics.Three.Math.Vector"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Math.Vector"] = $PS["Graphics.Three.Math.Vector"] || {};
  var exports = $PS["Graphics.Three.Math.Vector"];
  var $foreign = $PS["Graphics.Three.Math.Vector"];
  exports["createVec3"] = $foreign.createVec3;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Object3D"] = $PS["Graphics.Three.Object3D"] || {};
  var exports = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var getMaterial = function (dictRenderable) {
      return function (dictMaterial) {
          return Graphics_Three_Util.ffi([ "object", "" ])("object.material");
      };
  };
  var createMesh = function (dictMaterial) {
      return Graphics_Three_Util.ffi([ "geometry", "material", "" ])("new THREE.Mesh(geometry, material)");
  };
  exports["createMesh"] = createMesh;
  exports["getMaterial"] = getMaterial;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Scene"] = $PS["Graphics.Three.Scene"] || {};
  var exports = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var create = Graphics_Three_Util.ffi([ "" ])("new THREE.Scene()");
  var addObject = function (dictObject3D) {
      return Graphics_Three_Util.fpi([ "scene", "a", "" ])("scene.add(a)");
  };
  exports["create"] = create;
  exports["addObject"] = addObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.WebGLRenderTarget"] = $PS["Graphics.Three.WebGLRenderTarget"] || {};
  var exports = $PS["Graphics.Three.WebGLRenderTarget"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var unsafeGetTexture = Graphics_Three_Util.ffi([ "target", "" ])("target.texture");
  var createWeGLRenderer = Graphics_Three_Util.ffi([ "param", "width", "height", "" ])("new THREE.WebGLRenderTarget(width, height, param)");
  exports["createWeGLRenderer"] = createWeGLRenderer;
  exports["unsafeGetTexture"] = unsafeGetTexture;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.IO.Timer"] = $PS["Graphics.Yodaka.IO.Timer"] || {};
  var exports = $PS["Graphics.Yodaka.IO.Timer"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var createTimer = Graphics_Three_Util.fpi([ "callback", "" ])("d3.timer(callback)");
  exports["createTimer"] = createTimer;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.IO.Operator"] = $PS["Graphics.Yodaka.IO.Operator"] || {};
  var exports = $PS["Graphics.Yodaka.IO.Operator"];
  var Graphics_Three_Material = $PS["Graphics.Three.Material"];
  var Graphics_Three_MaterialAddition = $PS["Graphics.Three.MaterialAddition"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Graphics_Yodaka_IO_Timer = $PS["Graphics.Yodaka.IO.Timer"];                
  var setUniform = function (dictRenderable) {
      return function (name) {
          return function (newValue) {
              return function (target) {
                  return function __do() {
                      var v = Graphics_Three_Object3D.getMaterial()()(target)();
                      Graphics_Three_Material.setUniform(v)(name)(newValue)();
                      Graphics_Three_MaterialAddition.updateMaterial()(v)();
                      return target;
                  };
              };
          };
      };
  };
  var updateUniform = function (dictRenderable) {
      return function (name) {
          return function (target) {
              return function __do() {
                  var v = Graphics_Yodaka_IO_Timer.createTimer(function (elapse) {
                      return setUniform()(name)(elapse)(target)();
                  })();
                  return target;
              };
          };
      };
  };
  exports["updateUniform"] = updateUniform;
  exports["setUniform"] = setUniform;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.RenderTarget"] = $PS["Graphics.Yodaka.RenderTarget"] || {};
  var exports = $PS["Graphics.Yodaka.RenderTarget"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var Graphics_Three_WebGLRenderTarget = $PS["Graphics.Three.WebGLRenderTarget"];
  var textureSize = 1024;
  var setSkip = function (skip_) {
      return function (v) {
          return {
              id: v.id,
              target: v.target,
              scene: v.scene,
              skip: skip_
          };
      };
  };
  var getTexture = function (v) {
      return function __do() {
          var v1 = Graphics_Three_WebGLRenderTarget.unsafeGetTexture(v.target)();
          return v1;
      };
  };
  var getTarget = function (v) {
      return v.target;
  };
  var getScene = function (v) {
      return v.scene;
  };
  var getId = function (v) {
      return v.id;
  };
  var defaultRendererTarget = Graphics_Three_WebGLRenderTarget.createWeGLRenderer({})(textureSize)(textureSize);
  var createRenderTarget = function (id) {
      return function (t) {
          return function (s) {
              return {
                  id: id,
                  target: t,
                  scene: s,
                  skip: false
              };
          };
      };
  };
  var createHash = Graphics_Three_Util.ffi([ "" ])("require('crypto').createHash('md5').update(Math.random() + '').digest('hex');");
  var bufferTarget = function (s) {
      return function __do() {
          var v = defaultRendererTarget();
          var v1 = createHash();
          var target = setSkip(true)(createRenderTarget(v1)(v)(s));
          return target;
      };
  };
  var addObject = function (dictRenderable) {
      return Graphics_Three_Util.fpi([ "scene", "a", "" ])("scene.add(a)");
  };
  var renderTarget = function (dictRenderable) {
      return function (overlap) {
          return function __do() {
              var v = Graphics_Three_Scene.create();
              var v1 = defaultRendererTarget();
              addObject()(v)(overlap)();
              var v2 = createHash();
              var target = createRenderTarget(v2)(v1)(v);
              return target;
          };
      };
  };
  exports["getScene"] = getScene;
  exports["renderTarget"] = renderTarget;
  exports["bufferTarget"] = bufferTarget;
  exports["getId"] = getId;
  exports["getTarget"] = getTarget;
  exports["getTexture"] = getTexture;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Port"] = $PS["Graphics.Yodaka.Port"] || {};
  var exports = $PS["Graphics.Yodaka.Port"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var Graphics_Yodaka_RenderTarget = $PS["Graphics.Yodaka.RenderTarget"];                
  var setTarget = Graphics_Three_Util.fpi([ "index", "newTarget", "" ])("window.port.targets[index].target = newTarget");
  var globalPort = Data_Foreign_EasyFFI.unsafeForeignFunction([ "" ])("window.port");
  var getTargetIndexById = Data_Foreign_EasyFFI.unsafeForeignFunction([ "target", "" ])("window.port.targets.indexOf(target)");
  var getTargetById = function (id) {
      var foreign_ = Data_Foreign_EasyFFI.unsafeForeignFunction([ "callback", "" ])("window.port.targets.filter(callback)[0]");
      var callback = function (t) {
          return t.id === id;
      };
      return foreign_(callback);
  };
  var swapTargets = function (paire) {
      return function __do() {
          var v = getTargetById(paire.currentId)();
          var v1 = getTargetById(paire.nextId)();
          var t1Target = Graphics_Yodaka_RenderTarget.getTarget(v);
          var t2Target = Graphics_Yodaka_RenderTarget.getTarget(v1);
          var v2 = getTargetIndexById(v)();
          var v3 = getTargetIndexById(v1)();
          var v4 = Effect_Ref["new"](t1Target)();
          var v5 = setTarget(v2)(t2Target)();
          var v6 = Effect_Ref.read(v4)();
          var v7 = setTarget(v3)(v6)();
          return Data_Unit.unit;
      };
  };
  var addTargetToPort = Data_Foreign_EasyFFI.unsafeForeignFunction([ "target", "" ])("window.port.targets.push(target)");
  var addOnRenderCallback = Data_Foreign_EasyFFI.unsafeForeignFunction([ "callack", "" ])("window.port.onRender.push(callack)");
  exports["globalPort"] = globalPort;
  exports["addTargetToPort"] = addTargetToPort;
  exports["addOnRenderCallback"] = addOnRenderCallback;
  exports["getTargetById"] = getTargetById;
  exports["swapTargets"] = swapTargets;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Context"] = $PS["Graphics.Yodaka.Context"] || {};
  var exports = $PS["Graphics.Yodaka.Context"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var Graphics_Yodaka_IO_Operator = $PS["Graphics.Yodaka.IO.Operator"];
  var Graphics_Yodaka_Port = $PS["Graphics.Yodaka.Port"];
  var Graphics_Yodaka_RenderTarget = $PS["Graphics.Yodaka.RenderTarget"];                
  var uU = function (dictRenderable) {
      return function (name) {
          return function (target) {
              return Graphics_Yodaka_IO_Operator.updateUniform()(name)(target);
          };
      };
  };
  var sU = function (dictRenderable) {
      return function (name) {
          return function (newValue) {
              return function (target) {
                  return Graphics_Yodaka_IO_Operator.setUniform()(name)(newValue)(target);
              };
          };
      };
  };
  var render = function (dictRenderable) {
      return function (obj) {
          return function __do() {
              var v = obj();
              var v1 = Graphics_Yodaka_RenderTarget.renderTarget()(v)();
              Graphics_Yodaka_Port.addTargetToPort(v1)();
              var v2 = Graphics_Yodaka_RenderTarget.getTexture(v1)();
              return v2;
          };
      };
  };
  var fbRender = function (dictRenderable) {
      return function (uniformName) {
          return function (obj) {
              var swapOnRender = function (paire_) {
                  return function (targetPlane) {
                      return function (uniformName_) {
                          return function __do() {
                              Graphics_Yodaka_Port.swapTargets(paire_)();
                              var v = Graphics_Yodaka_Port.getTargetById(paire_.nextId)();
                              var v1 = Graphics_Yodaka_RenderTarget.getTexture(v)();
                              var v2 = Graphics_Yodaka_IO_Operator.setUniform()(uniformName_)(v1)(targetPlane)();
                              return Data_Unit.unit;
                          };
                      };
                  };
              };
              return function __do() {
                  var v = obj();
                  var v1 = Graphics_Yodaka_RenderTarget.renderTarget()(v)();
                  var v2 = Graphics_Yodaka_RenderTarget.bufferTarget(Graphics_Yodaka_RenderTarget.getScene(v1))();
                  Graphics_Yodaka_Port.addTargetToPort(v1)();
                  Graphics_Yodaka_Port.addTargetToPort(v2)();
                  var cId = Graphics_Yodaka_RenderTarget.getId(v1);
                  var nId = Graphics_Yodaka_RenderTarget.getId(v2);
                  var paire = {
                      currentId: cId,
                      nextId: nId
                  };
                  Graphics_Yodaka_Port.addOnRenderCallback(function (v3) {
                      return swapOnRender(paire)(v)(uniformName)();
                  })();
                  var v3 = Graphics_Yodaka_RenderTarget.getTexture(v2)();
                  return v3;
              };
          };
      };
  };
  var add = function (dictObject3D) {
      return function (obj) {
          return function __do() {
              var v = Graphics_Yodaka_Port.globalPort();
              var v1 = obj();
              return Graphics_Three_Scene.addObject()(v.scene)(v1)();
          };
      };
  };
  exports["add"] = add;
  exports["render"] = render;
  exports["fbRender"] = fbRender;
  exports["uU"] = uU;
  exports["sU"] = sU;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Frag"] = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Frag"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Frag
  var advectShader = "\x0a  uniform float deltaT;\x0a  uniform sampler2D base;\x0a  uniform sampler2D velocity;\x0a  varying vec2 vUv;\x0a\x0a  void main() {\x0a    vec2 u = texture2D(velocity, vUv).xy;\x0a\x0a    vec2 pastCoord = fract(vUv - (0.5 * deltaT * u));\x0a    gl_FragColor = texture2D(base, pastCoord);\x0a  }\x0a";
  exports["advectShader"] = advectShader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Plane.Shader.Frag"] = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Frag"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Frag"];                                                                                                                                                                        
  var rgbNoiseShader = "\x0a  uniform vec3 resolution;\x0a  uniform float density;\x0a  uniform float time;\x0a\x0a  vec2 random(vec2 st) {\x0a    st = vec2( dot(st, vec2(127.1, 311.7)),\x0a              dot(st, vec2(269.5, 183.3)) );\x0a              \x0a    return 2.0 * fract(sin(st) * 43758.5453123) - 1.0;\x0a  }\x0a\x0a\x0a  float noise(vec2 st) {\x0a    vec2 i = floor(st);\x0a    vec2 f = fract(st);\x0a\x0a    vec2 u = f * f * (3.0 - 2.0 * f);\x0a\x0a    return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \x0a                      dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\x0a                mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \x0a                      dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\x0a  }\x0a\x0a  void main() {\x0a    vec2 st = gl_FragCoord.xy / resolution.xy;\x0a    vec3 color = vec3(0.0);\x0a    vec2 posX = vec2(st * 18.0 * density) + sin(time * 0.0008) * 4.0;\x0a    vec2 posY = vec2(st * 8.0 * density) + sin(time * 0.0008) * 4.0;\x0a    vec2 posZ = vec2(st * 12.0 * density) + sin(time * 0.0008) * 4.0;\x0a    color = vec3( noise(posX) + .333, noise(posY) + .333, noise(posZ) + .333 );\x0a    gl_FragColor = vec4(color, 1.0);\x0a  }\x0a";
  var noiseShader = "\x0a  uniform vec3 resolution;\x0a  uniform float density;\x0a  uniform float time;\x0a\x0a  vec2 random(vec2 st) {\x0a    st = vec2( dot(st, vec2(127.1, 311.7)),\x0a              dot(st, vec2(269.5, 183.3)) );\x0a              \x0a    return 2.0 * fract(sin(st) * 43758.5453123) - 1.0;\x0a  }\x0a\x0a\x0a  float noise(vec2 st) {\x0a    vec2 i = floor(st);\x0a    vec2 f = fract(st);\x0a\x0a    vec2 u = f * f * (3.0 - 2.0 * f);\x0a\x0a    return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \x0a                      dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\x0a                mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \x0a                      dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\x0a  }\x0a\x0a  void main() {\x0a    vec2 st = gl_FragCoord.xy / resolution.xy;\x0a    vec3 color = vec3(0.0);\x0a    vec2 pos = vec2(st * 20.0 * density + sin(time * 0.0008) * 4.0);\x0a    color = vec3( noise(pos) * .5 + .5 );\x0a    gl_FragColor = vec4(color, 1.0);\x0a  }\x0a";
  var cGradShader = "\x0a  uniform sampler2D base;\x0a\x0a  uniform vec3 offsetColor;\x0a  uniform vec3 ampColor;\x0a  uniform vec3 freqColor;\x0a  // uniform vec3 phaseColor;\x0a  uniform float phase;\x0a\x0a  varying vec2 vUv;\x0a\x0a  const float PI = 3.14159265;\x0a\x0a  vec3 cosineGradient(vec3 a, vec3 b, vec3 c, vec3 d) {\x0a    float rotPhase = sin(phase * 0.001) * 1.0;\x0a    float twoPI = PI * 3.0;\x0a    float er = a[0] + b[0] * cos(twoPI * (c[0] * rotPhase + d[0])) + rotPhase;\x0a    float eg = a[1] + b[1] * cos(twoPI * (c[1] * rotPhase + d[1])) + rotPhase;\x0a    float eb = a[2] + b[2] * cos(twoPI * (c[2] * rotPhase + d[2])) + rotPhase;\x0a    return vec3(eb * 0.2, er * 0.1, eg * 0.4);\x0a  }\x0a\x0a  void main() {    \x0a    vec3 phaseColor = texture2D(base, vUv).rgb;\x0a    vec3 gradient = cosineGradient(offsetColor, ampColor, freqColor, phaseColor);\x0a\x0a    gl_FragColor = vec4(gradient, 1.0);\x0a  }\x0a";
  exports["noiseShader"] = noiseShader;
  exports["rgbNoiseShader"] = rgbNoiseShader;
  exports["cGradShader"] = cGradShader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Plane.Shader.Vert"] = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Vert"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Vert"];
  var vertexShader = "\x0a  varying vec2 vUv;\x0a  void main() {\x0a    vUv = uv;\x0a    gl_Position = modelMatrix * vec4(position, 1.0);\x0a  }\x0a";
  exports["vertexShader"] = vertexShader;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Data_Symbol = $PS["Data.Symbol"];
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };                                                
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Util"] = $PS["Graphics.Yodaka.Renderable.Util"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Util"];
  var Record_Builder = $PS["Record.Builder"];
  var uniformVec3 = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (name) {
                  return function (value_) {
                      return function (rec) {
                          var uniformValue = {
                              value: value_
                          };
                          return Record_Builder.build(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(name)(uniformValue))(rec);
                      };
                  };
              };
          };
      };
  };
  var uniformSampler2D = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (name) {
                  return function (value_) {
                      return function (rec) {
                          return Record_Builder.build(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(name)({
                              value: value_
                          }))(rec);
                      };
                  };
              };
          };
      };
  };
  var uniformFloat = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (name) {
                  return function (value_) {
                      return function (rec) {
                          var uniformValue = {
                              value: value_
                          };
                          return Record_Builder.build(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(name)(uniformValue))(rec);
                      };
                  };
              };
          };
      };
  };
  exports["uniformFloat"] = uniformFloat;
  exports["uniformVec3"] = uniformVec3;
  exports["uniformSampler2D"] = uniformSampler2D;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Plane.Shader"] = $PS["Graphics.Yodaka.Renderable.Plane.Shader"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Plane.Shader"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Graphics_Three_GeometryAddition = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Material = $PS["Graphics.Three.Material"];
  var Graphics_Three_Math_Vector = $PS["Graphics.Three.Math.Vector"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Graphics_Yodaka_Renderable_Plane_Shader_Frag = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Frag"];
  var Graphics_Yodaka_Renderable_Plane_Shader_Vert = $PS["Graphics.Yodaka.Renderable.Plane.Shader.Vert"];
  var Graphics_Yodaka_Renderable_Util = $PS["Graphics.Yodaka.Renderable.Util"];                
  var resolution = 1024.0;
  var resolutionUniform = function (dictLacks) {
      return function (rec) {
          return Graphics_Yodaka_Renderable_Util.uniformVec3()(dictLacks)(new Data_Symbol.IsSymbol(function () {
              return "resolution";
          }))(Data_Symbol.SProxy.value)(Graphics_Three_Math_Vector.createVec3(resolution)(resolution)(0.0))(rec);
      };
  };
  var planeSize = 2.0;
  var planeSegmentNum = 1;
  var makePlameMesh = function (frag) {
      return function (u) {
          return function __do() {
              var v = Graphics_Three_GeometryAddition.createPlaneBufferGeometry(planeSize)(planeSize)(planeSegmentNum)(planeSegmentNum)();
              var v1 = Graphics_Three_Material.createShader({
                  uniforms: u,
                  vertexShader: Graphics_Yodaka_Renderable_Plane_Shader_Vert.vertexShader,
                  fragmentShader: frag
              })();
              return Graphics_Three_Object3D.createMesh()(v)(v1)();
          };
      };
  };
  var noisePlane = (function () {
      var u = {};
      var u1 = resolutionUniform()(u);
      var u2 = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
          return "density";
      }))(Data_Symbol.SProxy.value)(1.0)(u1);
      var u3 = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
          return "time";
      }))(Data_Symbol.SProxy.value)(0.0)(u2);
      return makePlameMesh(Graphics_Yodaka_Renderable_Plane_Shader_Frag.noiseShader)(u3);
  })();
  var rgbNoisePlane = (function () {
      var u = {};
      var u1 = resolutionUniform()(u);
      var u2 = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
          return "density";
      }))(Data_Symbol.SProxy.value)(1.0)(u1);
      var u3 = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
          return "time";
      }))(Data_Symbol.SProxy.value)(0.0)(u2);
      return makePlameMesh(Graphics_Yodaka_Renderable_Plane_Shader_Frag.rgbNoiseShader)(u3);
  })();
  var cGradPlane = function (dictTexture) {
      return function (base) {
          var u = {};
          var u1 = Graphics_Yodaka_Renderable_Util.uniformSampler2D()()(new Data_Symbol.IsSymbol(function () {
              return "base";
          }))(Data_Symbol.SProxy.value)(base)(u);
          var u2 = Graphics_Yodaka_Renderable_Util.uniformVec3()()(new Data_Symbol.IsSymbol(function () {
              return "offsetColor";
          }))(Data_Symbol.SProxy.value)(Graphics_Three_Math_Vector.createVec3(1.2)(0.25)(2.2))(u1);
          var u3 = Graphics_Yodaka_Renderable_Util.uniformVec3()()(new Data_Symbol.IsSymbol(function () {
              return "ampColor";
          }))(Data_Symbol.SProxy.value)(Graphics_Three_Math_Vector.createVec3(0.8)(0.25)(1.1))(u2);
          var u4 = Graphics_Yodaka_Renderable_Util.uniformVec3()()(new Data_Symbol.IsSymbol(function () {
              return "freqColor";
          }))(Data_Symbol.SProxy.value)(Graphics_Three_Math_Vector.createVec3(0.9)(1.25)(0.9))(u3);
          var u5 = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
              return "phase";
          }))(Data_Symbol.SProxy.value)(0.0)(u4);
          return makePlameMesh(Graphics_Yodaka_Renderable_Plane_Shader_Frag.cGradShader)(u5);
      };
  };
  exports["noisePlane"] = noisePlane;
  exports["rgbNoisePlane"] = rgbNoisePlane;
  exports["cGradPlane"] = cGradPlane;
  exports["makePlameMesh"] = makePlameMesh;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Shader"] = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Shader"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Shader"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Graphics_Yodaka_Renderable_Plane_Fluid_Frag = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Frag"];
  var Graphics_Yodaka_Renderable_Plane_Shader = $PS["Graphics.Yodaka.Renderable.Plane.Shader"];
  var Graphics_Yodaka_Renderable_Util = $PS["Graphics.Yodaka.Renderable.Util"];
  var deltaT = 1.0 / 50.0;
  var advectPlane = function (dictTexture) {
      return function (input) {
          return function (velocity) {
              var u = Graphics_Yodaka_Renderable_Util.uniformFloat()()(new Data_Symbol.IsSymbol(function () {
                  return "deltaT";
              }))(Data_Symbol.SProxy.value)(deltaT)({});
              var u1 = Graphics_Yodaka_Renderable_Util.uniformSampler2D()()(new Data_Symbol.IsSymbol(function () {
                  return "base";
              }))(Data_Symbol.SProxy.value)(input)(u);
              var u2 = Graphics_Yodaka_Renderable_Util.uniformSampler2D()()(new Data_Symbol.IsSymbol(function () {
                  return "velocity";
              }))(Data_Symbol.SProxy.value)(velocity)(u1);
              return Graphics_Yodaka_Renderable_Plane_Shader.makePlameMesh(Graphics_Yodaka_Renderable_Plane_Fluid_Frag.advectShader)(u2);
          };
      };
  };
  exports["advectPlane"] = advectPlane;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                
  var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
  exports["unsafeUnion"] = unsafeUnion;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Renderable.Sphere"] = $PS["Graphics.Yodaka.Renderable.Sphere"] || {};
  var exports = $PS["Graphics.Yodaka.Renderable.Sphere"];
  var Graphics_Three_GeometryAddition = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_MaterialAddition = $PS["Graphics.Three.MaterialAddition"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];                
  var sphereDefaultOpt = {
      color: 2200782,
      roughness: 0.3
  };
  var sphere = function (opt) {
      var u = Record_Unsafe_Union.unsafeUnion(opt)(sphereDefaultOpt);
      return function __do() {
          var v = Graphics_Three_GeometryAddition.createSphereGeometry(1.5)(512.0)(512.0)();
          var v1 = Graphics_Three_MaterialAddition.createMeshStandard(u)();
          return Graphics_Three_Object3D.createMesh()(v)(v1)();
      };
  };
  exports["sphere"] = sphere;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Graphics_Yodaka_Context = $PS["Graphics.Yodaka.Context"];
  var Graphics_Yodaka_Renderable_Plane_Fluid_Shader = $PS["Graphics.Yodaka.Renderable.Plane.Fluid.Shader"];
  var Graphics_Yodaka_Renderable_Plane_Shader = $PS["Graphics.Yodaka.Renderable.Plane.Shader"];
  var Graphics_Yodaka_Renderable_Sphere = $PS["Graphics.Yodaka.Renderable.Sphere"];                
  var main = function __do() {
      Effect_Console.log("You Compiled Main module")();
      var v = Control_Bind.bindFlipped(Effect.bindEffect)(Graphics_Yodaka_Context.render())(Data_Functor.map(Effect.functorEffect)(Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Yodaka_Context.sU()("density")(1.2))(Graphics_Yodaka_Context.uU()("time")))(Graphics_Yodaka_Renderable_Plane_Shader.noisePlane))();
      var v1 = Control_Bind.bindFlipped(Effect.bindEffect)(Graphics_Yodaka_Context.render())(Data_Functor.map(Effect.functorEffect)(Control_Bind.composeKleisli(Effect.bindEffect)(Graphics_Yodaka_Context.sU()("density")(0.2))(Graphics_Yodaka_Context.uU()("time")))(Graphics_Yodaka_Renderable_Plane_Shader.rgbNoisePlane))();
      var v2 = Control_Bind.bindFlipped(Effect.bindEffect)(Graphics_Yodaka_Context.render())(Data_Functor.map(Effect.functorEffect)(Graphics_Yodaka_Context.sU()("phase")(190.0))(Graphics_Yodaka_Renderable_Plane_Shader.cGradPlane()(v1)))();
      var v3 = Graphics_Yodaka_Context.fbRender()("base")(Graphics_Yodaka_Renderable_Plane_Fluid_Shader.advectPlane()(v2)(v1))();
      return Graphics_Yodaka_Context.add()(Graphics_Yodaka_Renderable_Sphere.sphere({
          color: 16777215,
          map: v3,
          displacementMap: v3,
          bumpMap: v3,
          displacemnentScale: 0.5
      }))();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();