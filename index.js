// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  exports["Functor"] = Functor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $26 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($27) {
          return $26(Effect_Console.log($27));
      };
  };
  exports["log"] = log;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  }; 
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  exports["insert"] = insert;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Util"] = $PS["Graphics.Three.Util"] || {};
  var exports = $PS["Graphics.Three.Util"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
  var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
  exports["ffi"] = ffi;
  exports["fpi"] = fpi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.GeometryAddition"] = $PS["Graphics.Three.GeometryAddition"] || {};
  var exports = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                                                                                      
  var createPlaneBufferGeometry = Graphics_Three_Util.ffi([ "width", "height", "widthSegments", "heightSegments", "" ])("new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments)");
  exports["createPlaneBufferGeometry"] = createPlaneBufferGeometry;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Material"] = $PS["Graphics.Three.Material"] || {};
  var exports = $PS["Graphics.Three.Material"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                
  var createShader = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.ShaderMaterial(param)");
  exports["createShader"] = createShader;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  // module Graphics.Three.Math.Vector

  exports.createVec3 = function(x) {
      return function(y) {
          return function(z) {
              return new THREE.Vector3(x, y, z);
          };
      };
  };
})(PS["Graphics.Three.Math.Vector"] = PS["Graphics.Three.Math.Vector"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Math.Vector"] = $PS["Graphics.Three.Math.Vector"] || {};
  var exports = $PS["Graphics.Three.Math.Vector"];
  var $foreign = $PS["Graphics.Three.Math.Vector"];
  exports["createVec3"] = $foreign.createVec3;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Object3D"] = $PS["Graphics.Three.Object3D"] || {};
  var exports = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var createMesh = function (dictMaterial) {
      return Graphics_Three_Util.ffi([ "geometry", "material", "" ])("new THREE.Mesh(geometry, material)");
  };
  exports["createMesh"] = createMesh;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Scene"] = $PS["Graphics.Three.Scene"] || {};
  var exports = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];             
  var addObject = function (dictObject3D) {
      return Graphics_Three_Util.fpi([ "scene", "a", "" ])("scene.add(a)");
  };
  exports["addObject"] = addObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Port"] = $PS["Graphics.Yodaka.Port"] || {};
  var exports = $PS["Graphics.Yodaka.Port"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var globalPort = Data_Foreign_EasyFFI.unsafeForeignFunction([ "" ])("window.port");
  exports["globalPort"] = globalPort;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Context"] = $PS["Graphics.Yodaka.Context"] || {};
  var exports = $PS["Graphics.Yodaka.Context"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var Graphics_Yodaka_Port = $PS["Graphics.Yodaka.Port"];
  var add = function (dictObject3D) {
      return function (obj) {
          return function __do() {
              var v = Graphics_Yodaka_Port.globalPort();
              var v1 = obj();
              return Graphics_Three_Scene.addObject()(v.scene)(v1)();
          };
      };
  };
  exports["add"] = add;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Mochi"] = $PS["Mochi"] || {};
  var exports = $PS["Mochi"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var ConstructRecord = function (constructRecord) {
      this.constructRecord = constructRecord;
  };
  var ConstructRL = function (unsafeConstruct) {
      this.unsafeConstruct = unsafeConstruct;
  };
  var unsafeConstruct = function (dict) {
      return dict.unsafeConstruct;
  };
  var rowConstructRecord = function (dictRowToList) {
      return function (dictConstructRL) {
          return new ConstructRecord(function (v) {
              return unsafeConstruct(dictConstructRL)(Type_Data_RowList.RLProxy.value)(Foreign_Object.empty);
          });
      };
  };
  var nilConstructRL = new ConstructRL(function (v) {
      return function (obj) {
          return obj;
      };
  });
  var constructRecord = function (dict) {
      return dict.constructRecord;
  };
  var consConstructRL = function (dictIsSymbol) {
      return function (dictCons) {
          return function (dictConstructRL) {
              return new ConstructRL(function (v) {
                  return function (obj) {
                      var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                      return function (x) {
                          return unsafeConstruct(dictConstructRL)(Type_Data_RowList.RLProxy.value)(Foreign_Object.insert(name)(x)(obj));
                      };
                  };
              });
          };
      };
  };
  exports["constructRecord"] = constructRecord;
  exports["rowConstructRecord"] = rowConstructRecord;
  exports["nilConstructRL"] = nilConstructRL;
  exports["consConstructRL"] = consConstructRL;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Data_Symbol = $PS["Data.Symbol"];
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };                                                
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Type.Proxy"] = $PS["Type.Proxy"] || {};
  var exports = $PS["Type.Proxy"];
  var $$Proxy = (function () {
      function $$Proxy() {

      };
      $$Proxy.value = new $$Proxy();
      return $$Proxy;
  })();
  exports["Proxy"] = $$Proxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Shader"] = $PS["Graphics.Yodaka.Shader"] || {};
  var exports = $PS["Graphics.Yodaka.Shader"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Mochi = $PS["Mochi"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Proxy = $PS["Type.Proxy"];
  var mkUniformVector3 = Mochi.constructRecord(Mochi.rowConstructRecord()(Mochi.consConstructRL(new Data_Symbol.IsSymbol(function () {
      return "type";
  }))()(Mochi.consConstructRL(new Data_Symbol.IsSymbol(function () {
      return "value";
  }))()(Mochi.nilConstructRL))))(Type_Proxy["Proxy"].value);
  var uniformVec3 = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (name) {
                  return function (value) {
                      return function (rec) {
                          var uniformValue = mkUniformVector3("v3")(value);
                          return Record_Builder.build(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(name)(uniformValue))(rec);
                      };
                  };
              };
          };
      };
  };
  exports["uniformVec3"] = uniformVec3;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Node.NoisePlane"] = $PS["Graphics.Yodaka.Node.NoisePlane"] || {};
  var exports = $PS["Graphics.Yodaka.Node.NoisePlane"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Graphics_Three_GeometryAddition = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Material = $PS["Graphics.Three.Material"];
  var Graphics_Three_Math_Vector = $PS["Graphics.Three.Math.Vector"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Graphics_Yodaka_Shader = $PS["Graphics.Yodaka.Shader"];                
  var vertexShader = "\x0a  void main() {\x0a    gl_Position = modelMatrix * vec4(position, 1.0);\x0a  }\x0a";
  var resolution = 512.0;
  var initUniforms = Graphics_Yodaka_Shader.uniformVec3()()(new Data_Symbol.IsSymbol(function () {
      return "resolution";
  }))(Data_Symbol.SProxy.value)(Graphics_Three_Math_Vector.createVec3(resolution)(resolution)(0.0))({});
  var fragmentalShader = "\x0a  uniform vec3 resolution;\x0a\x0a  vec2 random(vec2 st) {\x0a    st = vec2( dot(st, vec2(127.1, 311.7)),\x0a              dot(st, vec2(269.5, 183.3)) );\x0a              \x0a    return 2.0 * fract(sin(st) * 43758.5453123) - 1.0;\x0a  }\x0a\x0a\x0a  float noise(vec2 st) {\x0a    vec2 i = floor(st);\x0a    vec2 f = fract(st);\x0a\x0a    vec2 u = f * f * (3.0 - 2.0 * f);\x0a\x0a    return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \x0a                     dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\x0a                mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \x0a                     dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\x0a  }\x0a\x0a  void main() {\x0a    vec2 st = gl_FragCoord.xy / resolution.xy;\x0a    vec3 color = vec3(0.0);\x0a    vec2 pos = vec2(st * 30.0);\x0a    color = vec3( noise(pos) * .5 + .5 );\x0a    gl_FragColor = vec4(color, 1.0);\x0a  }\x0a";
  var noisePlane = function __do() {
      var v = Graphics_Three_GeometryAddition.createPlaneBufferGeometry(2.0)(2.0)(1)(1)();
      var v1 = Graphics_Three_Material.createShader({
          uniforms: initUniforms,
          vertexShader: vertexShader,
          fragmentShader: fragmentalShader
      })();
      return Graphics_Three_Object3D.createMesh()(v)(v1)();
  };
  exports["noisePlane"] = noisePlane;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Graphics_Yodaka_Context = $PS["Graphics.Yodaka.Context"];
  var Graphics_Yodaka_Node_NoisePlane = $PS["Graphics.Yodaka.Node.NoisePlane"];                
  var main = function __do() {
      Effect_Class_Console.log(Effect_Class.monadEffectEffect)("You Compiled Main module")();
      return Graphics_Yodaka_Context.add()(Graphics_Yodaka_Node_NoisePlane.noisePlane)();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();