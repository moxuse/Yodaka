// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  exports["snoc"] = $foreign.snoc;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  exports["Functor"] = Functor;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var log = function (dictMonadEffect) {
      var $26 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($27) {
          return $26(Effect_Console.log($27));
      };
  };
  exports["log"] = log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Util"] = $PS["Graphics.Three.Util"] || {};
  var exports = $PS["Graphics.Three.Util"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
  var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
  exports["ffi"] = ffi;
  exports["fpi"] = fpi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.GeometryAddition"] = $PS["Graphics.Three.GeometryAddition"] || {};
  var exports = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                                                                                                      
  var createSphereGeometry = Graphics_Three_Util.ffi([ "radius", "widthSegments", "heightSegments", "" ])("new THREE.SphereGeometry(radius, widthSegments, heightSegments)");
  var createPlaneBufferGeometry = Graphics_Three_Util.ffi([ "width", "height", "widthSegments", "heightSegments", "" ])("new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments)");
  exports["createSphereGeometry"] = createSphereGeometry;
  exports["createPlaneBufferGeometry"] = createPlaneBufferGeometry;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Material"] = $PS["Graphics.Three.Material"] || {};
  var exports = $PS["Graphics.Three.Material"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                
  var createShader = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.ShaderMaterial(param)");
  exports["createShader"] = createShader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.MaterialAddition"] = $PS["Graphics.Three.MaterialAddition"] || {};
  var exports = $PS["Graphics.Three.MaterialAddition"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];       
  var createMeshStandard = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.MeshStandardMaterial(param)");
  exports["createMeshStandard"] = createMeshStandard;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  // module Graphics.Three.Math.Vector

  exports.createVec3 = function(x) {
      return function(y) {
          return function(z) {
              return new THREE.Vector3(x, y, z);
          };
      };
  };
})(PS["Graphics.Three.Math.Vector"] = PS["Graphics.Three.Math.Vector"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Math.Vector"] = $PS["Graphics.Three.Math.Vector"] || {};
  var exports = $PS["Graphics.Three.Math.Vector"];
  var $foreign = $PS["Graphics.Three.Math.Vector"];
  exports["createVec3"] = $foreign.createVec3;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Object3D"] = $PS["Graphics.Three.Object3D"] || {};
  var exports = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var createMesh = function (dictMaterial) {
      return Graphics_Three_Util.ffi([ "geometry", "material", "" ])("new THREE.Mesh(geometry, material)");
  };
  exports["createMesh"] = createMesh;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.Scene"] = $PS["Graphics.Three.Scene"] || {};
  var exports = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var create = Graphics_Three_Util.ffi([ "" ])("new THREE.Scene()");
  var addObject = function (dictObject3D) {
      return Graphics_Three_Util.fpi([ "scene", "a", "" ])("scene.add(a)");
  };
  exports["create"] = create;
  exports["addObject"] = addObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Three.WebGLRenderTarget"] = $PS["Graphics.Three.WebGLRenderTarget"] || {};
  var exports = $PS["Graphics.Three.WebGLRenderTarget"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                      
  var createWeGLRenderer = Graphics_Three_Util.ffi([ "param", "width", "height", "" ])("new THREE.WebGLRenderTarget(width, height, param)");
  exports["createWeGLRenderer"] = createWeGLRenderer;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Port"] = $PS["Graphics.Yodaka.Port"] || {};
  var exports = $PS["Graphics.Yodaka.Port"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var setGloalPort = Data_Foreign_EasyFFI.unsafeForeignFunction([ "port", "" ])("window.port = port");
  var gloabalPort = Data_Foreign_EasyFFI.unsafeForeignFunction([ "" ])("window.port");
  exports["gloabalPort"] = gloabalPort;
  exports["setGloalPort"] = setGloalPort;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.RenderTarget"] = $PS["Graphics.Yodaka.RenderTarget"] || {};
  var exports = $PS["Graphics.Yodaka.RenderTarget"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var Graphics_Three_WebGLRenderTarget = $PS["Graphics.Three.WebGLRenderTarget"];
  var unsafeGetTexture = Graphics_Three_Util.ffi([ "target", "" ])("target.texture");
  var textureSize = 512;
  var getTexture = function (v) {
      return function __do() {
          var v1 = unsafeGetTexture(v.target)();
          return v1;
      };
  };
  var defaultRendererTarget = Graphics_Three_WebGLRenderTarget.createWeGLRenderer({})(textureSize)(textureSize);
  var createRenderTarget = function (t) {
      return function (s) {
          return {
              target: t,
              scene: s
          };
      };
  };
  var renderTarget = function (overlap) {
      return function __do() {
          var v = Graphics_Three_Scene.create();
          var v1 = defaultRendererTarget();
          Graphics_Three_Scene.addObject()(v)(overlap)();
          var target = createRenderTarget(v1)(v);
          return target;
      };
  };
  exports["renderTarget"] = renderTarget;
  exports["getTexture"] = getTexture;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Context"] = $PS["Graphics.Yodaka.Context"] || {};
  var exports = $PS["Graphics.Yodaka.Context"];
  var Data_Array = $PS["Data.Array"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var Graphics_Yodaka_Port = $PS["Graphics.Yodaka.Port"];
  var Graphics_Yodaka_RenderTarget = $PS["Graphics.Yodaka.RenderTarget"];                
  var render = function (obj) {
      var setTargets = function (tr) {
          return function (p) {
              return {
                  scene: p.scene,
                  targets: tr
              };
          };
      };
      return function __do() {
          var v = Graphics_Yodaka_Port.gloabalPort();
          var v1 = obj();
          var v2 = Graphics_Yodaka_RenderTarget.renderTarget(v1)();
          var d = Data_Array.snoc(v.targets)(v2);
          var newPort = setTargets(d)(v);
          Graphics_Yodaka_Port.setGloalPort(newPort)();
          var v3 = Graphics_Yodaka_RenderTarget.getTexture(v2)();
          return v3;
      };
  };
  var add = function (dictObject3D) {
      return function (obj) {
          return function __do() {
              var v = Graphics_Yodaka_Port.gloabalPort();
              var v1 = obj();
              return Graphics_Three_Scene.addObject(dictObject3D)(v.scene)(v1)();
          };
      };
  };
  exports["add"] = add;
  exports["render"] = render;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Node.NoisePlane"] = $PS["Graphics.Yodaka.Node.NoisePlane"] || {};
  var exports = $PS["Graphics.Yodaka.Node.NoisePlane"];
  var Graphics_Three_GeometryAddition = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_Material = $PS["Graphics.Three.Material"];
  var Graphics_Three_Math_Vector = $PS["Graphics.Three.Math.Vector"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];                
  var vertexShader = "\x0a  void main() {\x0a    gl_Position = modelMatrix * vec4(position, 1.0);\x0a  }\x0a";
  var resolution = 512.0;
  var initUniforms = {
      resolution: {
          type: "v3",
          value: Graphics_Three_Math_Vector.createVec3(resolution)(resolution)(0.0)
      }
  };
  var fragmentalShader = "\x0a  uniform vec3 resolution;\x0a\x0a  vec2 random(vec2 st) {\x0a    st = vec2( dot(st, vec2(127.1, 311.7)),\x0a              dot(st, vec2(269.5, 183.3)) );\x0a              \x0a    return 2.0 * fract(sin(st) * 43758.5453123) - 1.0;\x0a  }\x0a\x0a\x0a  float noise(vec2 st) {\x0a    vec2 i = floor(st);\x0a    vec2 f = fract(st);\x0a\x0a    vec2 u = f * f * (3.0 - 2.0 * f);\x0a\x0a    return mix( mix( dot( random(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \x0a                     dot( random(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\x0a                mix( dot( random(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \x0a                     dot( random(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\x0a  }\x0a\x0a  void main() {\x0a    vec2 st = gl_FragCoord.xy / resolution.xy;\x0a    vec3 color = vec3(0.0);\x0a    vec2 pos = vec2(st * 10.0);\x0a    color = vec3( noise(pos) * .5 + .5 );\x0a    gl_FragColor = vec4(color, 1.0);\x0a  }\x0a";
  var noisePlane = function __do() {
      var v = Graphics_Three_GeometryAddition.createPlaneBufferGeometry(2.0)(2.0)(1)(1)();
      var v1 = Graphics_Three_Material.createShader({
          uniforms: initUniforms,
          vertexShader: vertexShader,
          fragmentShader: fragmentalShader
      })();
      return Graphics_Three_Object3D.createMesh()(v)(v1)();
  };
  exports["noisePlane"] = noisePlane;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeUnionFn = function(r1, r2) {
    var copy = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy[k2] = r1[k2];
      }
    }
    return copy;
  };
})(PS["Record.Unsafe.Union"] = PS["Record.Unsafe.Union"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Unsafe.Union"] = $PS["Record.Unsafe.Union"] || {};
  var exports = $PS["Record.Unsafe.Union"];
  var $foreign = $PS["Record.Unsafe.Union"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];                
  var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
  exports["unsafeUnion"] = unsafeUnion;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Yodaka.Node.Sphere"] = $PS["Graphics.Yodaka.Node.Sphere"] || {};
  var exports = $PS["Graphics.Yodaka.Node.Sphere"];
  var Graphics_Three_GeometryAddition = $PS["Graphics.Three.GeometryAddition"];
  var Graphics_Three_MaterialAddition = $PS["Graphics.Three.MaterialAddition"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Record_Unsafe_Union = $PS["Record.Unsafe.Union"];                
  var torusDefaultOpt = {
      color: 2200782,
      roughness: 0.17
  };
  var sphere = function (opt) {
      var u = Record_Unsafe_Union.unsafeUnion(opt)(torusDefaultOpt);
      return function __do() {
          var v = Graphics_Three_GeometryAddition.createSphereGeometry(1.0)(128.0)(128.0)();
          var v1 = Graphics_Three_MaterialAddition.createMeshStandard(u)();
          return Graphics_Three_Object3D.createMesh()(v)(v1)();
      };
  };
  exports["sphere"] = sphere;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Graphics_Yodaka_Context = $PS["Graphics.Yodaka.Context"];
  var Graphics_Yodaka_Node_NoisePlane = $PS["Graphics.Yodaka.Node.NoisePlane"];
  var Graphics_Yodaka_Node_Sphere = $PS["Graphics.Yodaka.Node.Sphere"];                
  var main = function __do() {
      Effect_Class_Console.log(Effect_Class.monadEffectEffect)("You Compiled Main module")();
      var v = Graphics_Yodaka_Context.render(Graphics_Yodaka_Node_NoisePlane.noisePlane)();
      var v1 = Graphics_Yodaka_Context.render(Graphics_Yodaka_Node_NoisePlane.noisePlane)();
      return Graphics_Yodaka_Context.add()(Graphics_Yodaka_Node_Sphere.sphere({
          color: 267597960,
          map: v,
          displacementMap: v1,
          normalMap: v,
          displacementScale: 1.0
      }))();
  };
  exports["main"] = main;
})(PS);
PS["Main"].main();